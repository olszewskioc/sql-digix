/*
------------------------------------------------------------------

 						LISTA (07/02/25)
						THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

CREATE SCHEMA IF NOT EXISTS LISTA1;

CREATE TABLE IF NOT EXISTS LISTA1.INSTRUTOR (
    ID_INSTRUTOR    INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    RG_INSTRUTOR    INT NOT NULL,
    NOME_INSTRUTOR  VARCHAR(45) NOT NULL,
    DATA_NASC       DATE,
    TITULACAO       INT
);


CREATE TABLE IF NOT EXISTS LISTA1.TELEFONE_INSTRUTOR (
    ID_TELEFONE     INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NUMERO_TELEFONE VARCHAR(15) NOT NULL,
    TIPO_TELEFONE   VARCHAR(45),
    INSTRUTOR_ID    INT NOT NULL,
    CONSTRAINT FK_TELEFONE_INSTRUTOR FOREIGN KEY (INSTRUTOR_ID)
    REFERENCES LISTA1.INSTRUTOR (ID_INSTRUTOR)
);

ALTER TABLE LISTA1.TELEFONE_INSTRUTOR ALTER COLUMN NUMERO_TELEFONE TYPE VARCHAR(15);

CREATE TABLE IF NOT EXISTS LISTA1.ATIVIDADE (
    ID_ATIVIDADE      INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NOME_ATIVIDADE    VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS LISTA1.TURMA (
    ID_TURMA        INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NOME_TURMA      VARCHAR(45) NOT NULL UNIQUE,
    HORARIO_TURMA   TIME NOT NULL,
    DURACAO_TURMA   INT NOT NULL,
    DATA_INICIO     DATE NOT NULL,
    DATA_FIM        DATE NOT NULL,
    ATIVIDADE_ID    INT NOT NULL,
    INSTRUTOR_ID    INT NOT NULL,
    CONSTRAINT FK_TURMA_ATIVIDADE FOREIGN KEY (ATIVIDADE_ID)
    REFERENCES LISTA1.ATIVIDADE (ID_ATIVIDADE),
    CONSTRAINT FK_TURMA_INSTRUTOR FOREIGN KEY (INSTRUTOR_ID)
    REFERENCES LISTA1.INSTRUTOR (ID_INSTRUTOR)
);


CREATE TABLE IF NOT EXISTS LISTA1.ALUNO (
    COD_MATRICULA   INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TURMA_ID        INT,
    DATA_MATRICULA  DATE NOT NULL,
    NOME_ALUNO      VARCHAR(45) NOT NULL,
    ENDERECO_ALUNO  TEXT,
    TELEFONE_ALUNO  VARCHAR(15),
    DATA_NASC       DATE,
    ALTURA_ALUNO    FLOAT,
    PESO_ALUNO      FLOAT
);

CREATE TABLE IF NOT EXISTS LISTA1.CHAMADA (
    ID_CHAMADA          INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DATA_CHAMADA        DATE NOT NULL,
    PRESENTE            BOOLEAN NOT NULL,
    ALUNO_COD_MATRICULA INT NOT NULL,
    TURMA_ID            INT NOT NULL,
    CONSTRAINT FK_CHAMADA_ALUNO FOREIGN KEY (ALUNO_COD_MATRICULA)
    REFERENCES LISTA1.ALUNO (COD_MATRICULA),
    CONSTRAINT FK_CHAMADA_TURMA FOREIGN KEY (TURMA_ID)
    REFERENCES LISTA1.TURMA (ID_TURMA)
);

COPY LISTA1.INSTRUTOR (RG_INSTRUTOR, NOME_INSTRUTOR, DATA_NASC, TITULACAO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\Lista1\Instrutor.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY LISTA1.TELEFONE_INSTRUTOR (NUMERO_TELEFONE, TIPO_TELEFONE, INSTRUTOR_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\Lista1\TelefoneInstrutor.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY LISTA1.ATIVIDADE (NOME_ATIVIDADE) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\Lista1\Atividade.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY LISTA1.TURMA (NOME_TURMA, HORARIO_TURMA, DURACAO_TURMA, DATA_INICIO, DATA_FIM, ATIVIDADE_ID, INSTRUTOR_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\Lista1\Turma.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY LISTA1.ALUNO (TURMA_ID, DATA_MATRICULA, NOME_ALUNO, ENDERECO_ALUNO, TELEFONE_ALUNO, DATA_NASC, ALTURA_ALUNO, PESO_ALUNO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\Lista1\Aluno.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY LISTA1.CHAMADA (DATA_CHAMADA, PRESENTE, ALUNO_COD_MATRICULA, TURMA_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\Lista1\Chamada.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);

INSERT INTO LISTA1.ALUNO (TURMA_ID, DATA_MATRICULA, NOME_ALUNO, ENDERECO_ALUNO, TELEFONE_ALUNO, DATA_NASC, ALTURA_ALUNO, PESO_ALUNO)  
VALUES  
    (2, '2024-10-30', 'JULIA FERNANDES', 'R. DOS GIRASSÓIS 128, JARDIM SOLAR', '(51)99123-5678', '2002-09-05', 1.58, 55.1),  
    (2, '2024-10-30', 'JULIA RODRIGUES', 'R. DOS LÍRIOS 129, JARDIM SOLAR', '(51)99123-5678', '2002-10-05', 1.88, 87.6),  
    (2, '2024-10-30', 'JULIA BARRETO', 'R. DOS CUPINS 130, JARDIM FORMIGA', '(51)99123-5678', '2000-09-05', 1.60, 60.0);

INSERT INTO LISTA1.TURMA (NOME_TURMA, HORARIO_TURMA, DURACAO_TURMA, DATA_INICIO, DATA_FIM, ATIVIDADE_ID)
VALUES ('ENG_COMP3', '07:00:00', 5, '2024-01-01', '2028-10-12', 1);
-- EXERCICÍOS

-- 1. LISTAR TODOS OS ALUNOS E OS NOMES DAS TURMAS EM QUE ESTÃO MATRICULADOS
SELECT A.NOME_ALUNO, T.NOME_TURMA
FROM LISTA1.ALUNO AS A
LEFT JOIN LISTA1.TURMA T ON T.ID_TURMA = A.TURMA_ID
ORDER BY T.NOME_TURMA;

-- 2. CONTAR QUANTOS ALUNOS ESTÃO MATRICULADOS EM CADA TURMA
SELECT T.NOME_TURMA, COUNT(A.COD_MATRICULA) AS QTD_ALUNOS
FROM LISTA1.TURMA T
LEFT JOIN LISTA1.ALUNO A ON A.TURMA_ID = T.ID_TURMA
GROUP BY T.NOME_TURMA
ORDER BY QTD_ALUNOS DESC;

-- 3. MOSTRAR A MÉDIA DE IDADE DOS ALUNOS EM CADA TURMA
SELECT T.NOME_TURMA, 
ROUND(AVG(EXTRACT(YEAR FROM AGE(A.DATA_NASC))), 0) AS MEDIA_IDADE
FROM LISTA1.TURMA T
LEFT JOIN LISTA1.ALUNO A ON A.TURMA_ID = T.ID_TURMA
GROUP BY T.NOME_TURMA
ORDER BY AVG(EXTRACT(YEAR FROM AGE(A.DATA_NASC))) DESC;

-- 4. ENCONTRAR AS TURMAS COM MAIS DE 3 ALUNOS MATRICULADOS
SELECT T.NOME_TURMA, COUNT(A.COD_MATRICULA) AS QTD_ALUNOS
FROM LISTA1.TURMA T
LEFT JOIN LISTA1.ALUNO A ON A.TURMA_ID = T.ID_TURMA
GROUP BY T.NOME_TURMA
HAVING COUNT(A.COD_MATRICULA) > 3
ORDER BY QTD_ALUNOS DESC;

-- 5. EXIBIR OS INSTRUTORES QUE ORIENTAM TURMAS E OS QUE AINDA NÃO POSSUEM TURMAS
SELECT I.NOME_INSTRUTOR, T.NOME_TURMA
FROM LISTA1.INSTRUTOR I
LEFT JOIN LISTA1.TURMA T ON I.ID_INSTRUTOR = T.INSTRUTOR_ID
GROUP BY I.NOME_INSTRUTOR, T.NOME_TURMA
ORDER BY T.NOME_TURMA;

-- 6. ENCONTRAR ALUNOS QUE FREQUENTAM TODAS AS AULAS DE SUA TURMA
SELECT A.NOME_ALUNO, T.NOME_TURMA
FROM LISTA1.ALUNO A
JOIN LISTA1.TURMA T ON A.TURMA_ID = T.ID_TURMA
JOIN LISTA1.CHAMADA C ON C.ALUNO_COD_MATRICULA = A.COD_MATRICULA
GROUP BY A.NOME_ALUNO, T.NOME_TURMA
HAVING COUNT(CASE WHEN C.PRESENTE = FALSE THEN 1 END) = 0;

-- 7. MOSTRAR OS INSTRUTORES QUE MINISTRAM TURMAS DE ALGUMA ENGENHARIA
SELECT I.NOME_INSTRUTOR, T.NOME_TURMA, A.NOME_ATIVIDADE AS AREA
FROM LISTA1.INSTRUTOR I
JOIN LISTA1.TURMA T ON I.ID_INSTRUTOR = T.INSTRUTOR_ID
JOIN LISTA1.ATIVIDADE A ON A.ID_ATIVIDADE = T.ATIVIDADE_ID
WHERE A.NOME_ATIVIDADE LIKE '%ENGENHARIA%'
ORDER BY I.NOME_INSTRUTOR ASC;

-- 8. LISTAR OS ALUNOS QUE ESTÃO MATRICULADOS EM MAIS DE UMA TURMA
SELECT A.NOME_ALUNO 