-- Active: 1739211085766@@127.0.0.1@5432@digix@au8
/*
------------------------------------------------------------------

 						        EX 9 (17/02/25)
                                TEMA: PROCEDURES
						       THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

/*
1. CRIE UMA FUNÇÃO CHAMADA ESPACO_DISPONIVEL QUE RECEBE O ID
DA MÁQUINA E RETORNA TRUE SE HOUVER ESPAÇO SUFICIENTE PARA
INSTALAR UM SOFTWARE
*/
CREATE OR REPLACE FUNCTION ESPACO_DISPONIVEL(ID INTEGER)
RETURNS BOOLEAN AS $$
DECLARE HD_SPACE INTEGER;
BEGIN
    SELECT HARDDISK INTO HD_SPACE FROM MAQUINA WHERE ID_MAQUINA = ID;
    IF HD_SPACE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'ERRO: ID % NÃO PODE SER VERIFICADO', ID;
        RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM ESPACO_DISPONIVEL(1);

/*
2. CRIE UMA PROCEDURE INSTALAR_SOFTWARE QUE SÓ INSTALA UM 
SOFTWARE SE HOUVER ESPAÇO DISPONÍVEL
*/
CREATE OR REPLACE PROCEDURE INSTALAR_SOFTWARE(ID_MAQUINA INTEGER, ID_SOFT INTEGER)
AS $$
DECLARE INSTALL BOOLEAN;
DECLARE NOME_SOFTWARE VARCHAR(255);
BEGIN
    SELECT * INTO INSTALL FROM ESPACO_DISPONIVEL(ID_MAQUINA);
    SELECT PRODUTO INTO NOME_SOFTWARE FROM SOFTWARE WHERE ID_SOFTWARE = ID_SOFT;
    IF INSTALL THEN
        RAISE NOTICE 'INSTALANDO % NA MAQUINA %', NOME_SOFTWARE, ID_MAQUINA;
    ELSE
        RAISE EXCEPTION 'NÃO HÁ ESPAÇO NA MÁQUINA % PARA INSTALAR %', ID_MAQUINA, NOME_SOFTWARE;
    END IF;
END;
$$ LANGUAGE plpgsql;

DROP PROCEDURE INSTALAR_SOFTWARE;
CALL INSTALAR_SOFTWARE(1, 1);

/*
3. CRIE UMA FUNÇÃO CHAMADA MAQUINAS_DO_USUARIO QUE RETORNA
UMA LISTA DE MÁQUINAS ASSOCIADAS A UM USUÁRIO
*/
CREATE OR REPLACE FUNCTION MAQUINAS_DO_USUARIO(ID INTEGER)
RETURNS SETOF MAQUINA AS $$
BEGIN
    RETURN QUERY SELECT * FROM MAQUINA WHERE MAQUINA.FK_USUARIO = ID;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'NÃO HÁ MÁQUINAS ASSOCIADAS AO USUÁRIO %', ID;
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT * FROM MAQUINAS_DO_USUARIO(1);

/*
4. CRIE UMA PROCEDURE ATUALIZAR_RECURSOS_MAQUINA QUE AUMENTA A 
MEMÓRIA RAM E O ESPAÇO DE UMA MÁQUINA ESPECÍFICA
*/
CREATE OR REPLACE PROCEDURE ATUALIZAR_RECURSOS_MAQUINA(
    ID INTEGER,
    RAM INTEGER,
    ESPACO INTEGER
) AS $$
BEGIN
    UPDATE MAQUINA SET MEMORIA_RAM = RAM, HARDDISK = ESPACO 
    WHERE ID_MAQUINA = ID;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'NÃO HÁ MÁQUINA %', ID;
    END IF;
END;
$$ LANGUAGE plpgsql;

CALL ATUALIZAR_RECURSOS_MAQUINA(8, 8, 1000);

/*
5. CRIE UMA PROCEDURE CHAMADA TRANSFERIR_SOFTWARE QUE TRANSFERE
UM SOFTWARE DE UMA MÁQUINA PARA OUTRA. ANTES DE TRANSFERIR, 
A PROCEDURE DEVE VERIFICAR SE A MÁQUINA DESTINO TEM ESPAÇO
SUFICIENTE PARA O SOFTWARE
*/
CREATE OR REPLACE PROCEDURE TRANSFERIR_SOFTWARE(
    ID_MAQUINA_ORIGEM INTEGER,
    ID_MAQUINA_DESTINO INTEGER,
    ID_SOFTWARE_TRANSF INTEGER
) AS $$
DECLARE SIZE INTEGER;
DECLARE NOME_SOFT VARCHAR(255);
BEGIN
    SELECT HARDDISK INTO SIZE FROM MAQUINA WHERE ID_MAQUINA = ID_MAQUINA_DESTINO;
    SELECT PRODUTO INTO NOME_SOFT FROM SOFTWARE WHERE ID_SOFTWARE = ID_SOFTWARE_TRANSF;
    IF SIZE < (SELECT HARDDISK FROM SOFTWARE WHERE ID_SOFTWARE = ID_SOFTWARE_TRANSF) THEN
        RAISE EXCEPTION 'NÃO HÁ ESPAÇO SUFICIENTE PARA O SOFTWARE %', NOME_SOFT;
    END IF;

    UPDATE SOFTWARE SET FK_MAQUINA = ID_MAQUINA_DESTINO 
    WHERE ID_SOFTWARE = ID_SOFTWARE_TRANSF 
    AND FK_MAQUINA = ID_MAQUINA_ORIGEM;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'SOFTWARE % NÃO ENCONTRADO', NOME_SOFT;
    END IF;
    
END;
$$ LANGUAGE plpgsql;

CALL TRANSFERIR_SOFTWARE(1, 2, 3);

/*
6. CRIE UMA FUNÇÃO MEDIA_RECURSOS QUE RETORNA A MEDIA DE
MEMÓRIA RAM E HARDDISK DE TODAS AS MÁQUINAS CADASTRADAS
*/
CREATE OR REPLACE FUNCTION MEDIA_RECURSOS()
RETURNS TABLE(media_ram NUMERIC, media_hdd NUMERIC) AS $$
BEGIN
RETURN QUERY 
SELECT 
    ROUND(AVG(MEMORIA_RAM), 2) AS media_ram, 
    ROUND(AVG(HARDDISK), 2) AS media_hdd 
    FROM MAQUINA;
END;
$$ LANGUAGE plpgsql;

DROP FUNCTION media_recursos;

SELECT * FROM MEDIA_RECURSOS();

/*
7. CRIE UMA PROCEDURE CHAMADA DIAGNOSTICO_MAQUINA QUE FAZ UMA
AVALIAÇÃO COMPLETA DE UMA MÁQUINA E SUGERE UM UPGRADE SE OS
RECURSOS DELA NÃO FOREM SUFICIENTES PARA RODAR OS SOFTWARES
INSTALADOS
*/

SELECT MEMORIA_RAM FROM MAQUINA;

CREATE OR REPLACE PROCEDURE DIAGNOSTICO_MAQUINA(ID_MAQ INTEGER)
AS $$
DECLARE HD INTEGER;
DECLARE RAM INTEGER;
DECLARE ID_SOFT INTEGER;
DECLARE SUM_HD INTEGER;
DECLARE SUM_RAM INTEGER;
BEGIN
    SELECT HARDDISK, MEMORIA_RAM
    INTO HD, RAM
    FROM MAQUINA 
    WHERE ID_MAQUINA = ID_MAQ;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'NÃO HÁ MÁQUINA %', ID;
    END IF;

    SELECT SUM(HARDDISK), 
    SUM(MEMORIA_RAM)
    INTO SUM_HD, SUM_RAM
    FROM SOFTWARE
    WHERE FK_MAQUINA = ID_MAQ;

    IF SUM_HD > HD THEN
        RAISE NOTICE 'A MÁQUINA PRECISA DE UPGRADE DE HARDDISK DE %GB', SUM_HD - HD;
	END IF;
    IF SUM_RAM > RAM THEN
        RAISE NOTICE 'A MÁQUINA PRECISA DE UPGRADE DE MEMÓRIA RAM DE %GB', SUM_RAM - RAM;
	END IF;
    IF SUM_HD <= HD AND SUM_RAM <= RAM THEN
        RAISE NOTICE 'A MÁQUINA ESTÁ COM RECURSOS SUFICIENTES';
    END IF;
END;
$$ LANGUAGE plpgsql;

DROP PROCEDURE DIAGNOSTICO_MAQUINA;

CALL DIAGNOSTICO_MAQUINA(2);