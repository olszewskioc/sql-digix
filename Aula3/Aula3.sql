/*
------------------------------------------------------------------

 						AULA 3 (03/02/25)
						THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

-- Criar a tabela DEPARTAMENTO primeiro para evitar erro de FK
CREATE TABLE IF NOT EXISTS TESTES.DEPARTAMENTO (
    NUMDPT      INT NOT NULL PRIMARY KEY,
    NOMEDPT     VARCHAR(50) NOT NULL,
    FK_CPFGER   CHAR(11) -- Será atualizado depois
);

-- Criar a tabela EMPREGADO
CREATE TABLE IF NOT EXISTS TESTES.EMPREGADO (
    CPF             CHAR(11) NOT NULL PRIMARY KEY,
    NOME            VARCHAR(50) NOT NULL,
    ENDERECO        VARCHAR(100) NOT NULL,
    SALARIO         DECIMAL(10,2) NOT NULL,
    DATANASC        DATE NOT NULL,
    SEXO            CHAR(1) NOT NULL,
    CARTTRAB        VARCHAR(20),
    FK_NUMDPT       INT NOT NULL,
    FK_CPFSUPER     CHAR(11), -- Pode ser NULL para evitar erro na inserção inicial
    CONSTRAINT FK_NUMDPT FOREIGN KEY (FK_NUMDPT) REFERENCES TESTES.DEPARTAMENTO(NUMDPT),
    CONSTRAINT FK_CPFSUPER FOREIGN KEY (FK_CPFSUPER) REFERENCES TESTES.EMPREGADO(CPF)
);

-- Atualizar a FK_CPFGER em DEPARTAMENTO agora que EMPREGADO existe
ALTER TABLE TESTES.DEPARTAMENTO 
ADD CONSTRAINT FK_CPFGER FOREIGN KEY (FK_CPFGER) REFERENCES TESTES.EMPREGADO(CPF);

-- Criar a tabela PROJETO
CREATE TABLE IF NOT EXISTS TESTES.PROJETO (
    NUMPROJ     INT NOT NULL PRIMARY KEY,
    NOMEPROJ    VARCHAR(50) NOT NULL,
    LOCALIZACAO VARCHAR(50) NOT NULL,
    FK_NUMDPT   INT NOT NULL,
    CONSTRAINT FK_NUMDPT FOREIGN KEY (FK_NUMDPT) REFERENCES TESTES.DEPARTAMENTO(NUMDPT)
);

-- Criar a tabela DEPENDENTE
CREATE TABLE IF NOT EXISTS TESTES.DEPENDENTE (
    FK_CPFE     CHAR(11) NOT NULL,
    NOMEDEP     VARCHAR(50) NOT NULL,
    SEXO        CHAR(1) NOT NULL,
    PARENTESCO  VARCHAR(20) NOT NULL,
    CONSTRAINT FK_CPFE FOREIGN KEY (FK_CPFE) REFERENCES TESTES.EMPREGADO(CPF)
);

-- Criar a tabela TRABALHA_EM
CREATE TABLE IF NOT EXISTS TESTES.TRABALHA_EM (
    FK_CPFE     CHAR(11) NOT NULL,
    FK_NUMPROJ  INT NOT NULL,
    HORAS       INT NOT NULL,
    CONSTRAINT FK_CPFE FOREIGN KEY (FK_CPFE) REFERENCES TESTES.EMPREGADO(CPF),
    CONSTRAINT FK_NUMPROJ FOREIGN KEY (FK_NUMPROJ) REFERENCES TESTES.PROJETO(NUMPROJ)
);

-- INSERIR OS DADOS

-- Inserir Departamentos
INSERT INTO TESTES.DEPARTAMENTO (NUMDPT, NOMEDPT) VALUES
(1, 'Recursos Humanos'),
(2, 'Tecnologia'),
(3, 'Financeiro'),
(4, 'Marketing'),
(5, 'Operações');

-- Inserir Empregados sem FK_CPFSUPER primeiro
INSERT INTO TESTES.EMPREGADO (CPF, NOME, ENDERECO, SALARIO, DATANASC, SEXO, CARTTRAB, FK_NUMDPT) VALUES
('11111111111', 'Ana Souza', 'Rua A, 123', 5000.00, '1985-03-10', 'F', '123456789', 1),
('22222222222', 'Carlos Lima', 'Rua B, 456', 7000.00, '1980-07-22', 'M', '987654321', 2),
('33333333333', 'Mariana Alves', 'Rua C, 789', 6500.00, '1990-02-15', 'F', '112233445', 3),
('44444444444', 'Roberto Santos', 'Rua D, 101', 5500.00, '1988-06-30', 'M', '556677889', 4),
('55555555555', 'Fernanda Melo', 'Rua E, 202', 6000.00, '1983-12-05', 'F', '998877665', 5);

-- Agora, atualizar os FK_CPFSUPER
UPDATE TESTES.EMPREGADO SET FK_CPFSUPER = '11111111111' WHERE CPF <> '11111111111';

-- Atualizar os FK_CPFGER em DEPARTAMENTO com os CPFs corretos
UPDATE TESTES.DEPARTAMENTO 
SET FK_CPFGER = CPF 
FROM TESTES.EMPREGADO 
WHERE TESTES.DEPARTAMENTO.NUMDPT = TESTES.EMPREGADO.FK_NUMDPT;

-- Inserir Projetos
INSERT INTO TESTES.PROJETO (NUMPROJ, NOMEPROJ, LOCALIZACAO, FK_NUMDPT) VALUES
(1, 'Automação RH', 'São Paulo', 1),
(2, 'Sistema ERP', 'Rio de Janeiro', 2),
(3, 'Auditoria Fiscal', 'Brasília', 3),
(4, 'Campanha Publicitária', 'Belo Horizonte', 4),
(5, 'Logística 4.0', 'Curitiba', 5);

-- Inserir Dependentes
INSERT INTO TESTES.DEPENDENTE (FK_CPFE, NOMEDEP, SEXO, PARENTESCO) VALUES
('11111111111', 'Lucas Souza', 'M', 'Filho'),
('22222222222', 'Beatriz Lima', 'F', 'Filha'),
('33333333333', 'João Alves', 'M', 'Esposo'),
('44444444444', 'Patrícia Santos', 'F', 'Esposa'),
('55555555555', 'Gustavo Melo', 'M', 'Filho');

-- Inserir Trabalha_em (Relação Empregado x Projeto)
INSERT INTO TESTES.TRABALHA_EM (FK_CPFE, FK_NUMPROJ, HORAS) VALUES
('11111111111', 1, 20),
('22222222222', 2, 25),
('33333333333', 3, 30),
('44444444444', 4, 35),
('55555555555', 5, 40);
INSERT INTO TESTES.TRABALHA_EM (FK_CPFE, FK_NUMPROJ, HORAS) VALUES ('55555555555', 3, 10);
INSERT INTO TESTES.TRABALHA_EM (FK_CPFE, FK_NUMPROJ, HORAS) VALUES ('22222222222', 3, 30);


SELECT * FROM TESTES.DEPARTAMENTO;
SELECT * FROM TESTES.EMPREGADO;
SELECT * FROM TESTES.PROJETO;
SELECT * FROM TESTES.DEPENDENTE;
SELECT * FROM TESTES.TRABALHA_EM;

-- SUBSTRING COM POSIÇÕES ESPECÍFICAS DE CARACTERES
SELECT P.NOMEPROJ FROM TESTES.PROJETO P WHERE P.NOMEPROJ LIKE 'Au__________';

-- CALCULANDO AUMENTO DIRETO NA COLUNA
SELECT E.CPF, E.NOME, E.SALARIO * 1.15 AS SALARIO_FINAL FROM TESTES.EMPREGADO E;

-- EVITAR DUPLICAÇÕES COM DISTINCT
SELECT DISTINCT E.NOME, E.CPF FROM TESTES.EMPREGADO E, TESTES.TRABALHA_EM T
WHERE E.CPF = T.FK_CPFE;

-- UTILIZAR UNION QUE É UNIÃO DE DUAS CONSULTAS
-- LISTAR OS N´MEROS DOS PROJETOS NOS QUAIS ESTÃO ENVOLVIDOS O EMPREGADO GUSTAVO MELO
-- COMO EMPREGADO OU GERENTE DO DEPARTAMENTO QUE CONTROLA O PROJETO
(SELECT DISTINCT NUMPROJ FROM 
TESTES.PROJETO P, TESTES.DEPARTAMENTO D, TESTES.EMPREGADO E
WHERE P.FK_NUMDPT = D.NUMDPT AND D.FK_CPFGER = E.CPF AND E.NOME = 'Fernanda Melo') -- COMO GERENTE
UNION
(SELECT NUMPROJ FROM
TESTES.PROJETO P, TESTES.EMPREGADO E, TESTES.TRABALHA_EM T
WHERE P.NUMPROJ = T.FK_NUMPROJ AND T.FK_CPFE = E.CPF AND E.NOME = 'Fernanda Melo'); -- COMO EMPREGADO

-- USO DO INTERSECT
SELECT E.NOME FROM TESTES.EMPREGADO E 
INTERSECT 
SELECT E.NOME FROM TESTES.EMPREGADO E, TESTES.DEPARTAMENTO D 
WHERE D.FK_CPFGER = E.CPF;

-- UTILIZAR IS NULL PARA IMPRIMIR REGISTROS QUE SÃO NULL EM CERTA COLUNA
SELECT E.NOME FROM TESTES.EMPREGADO E WHERE E.FK_CPFSUPER IS NULL;
SELECT E.NOME FROM TESTES.EMPREGADO E WHERE E.FK_CPFSUPER IS NOT NULL;

-- FUNÇÕES JÁ NATIVAS
-- MÉDIAS
SELECT ROUND(AVG(E.SALARIO), 2) FROM TESTES.EMPREGADO E;
-- MAIOR SALÁRIO
SELECT MAX(E.SALARIO) FROM TESTES.EMPREGADO E;
-- MENOR SALÁRIO
SELECT MIN(E.SALARIO) FROM TESTES.EMPREGADO E;
-- SOMA
SELECT SUM(E.SALARIO) FROM TESTES.EMPREGADO E;