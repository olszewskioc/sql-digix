-- Active: 1739211085766@@127.0.0.1@5432@digix
/*
------------------------------------------------------------------

 						    EXERCÍCIO 6 (10/02/25)
                                TEMA: DESAFIO
						       THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

CREATE SCHEMA DESAFIO;

CREATE TABLE IF NOT EXISTS DESAFIO.PESSOA (
    ID      INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CPF     CHAR(11) NOT NULL UNIQUE,
    NOME    VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS DESAFIO.ENGENHEIRO (
    ID      INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CREA    INT NOT NULL UNIQUE,
    PES_ID     INT NOT NULL UNIQUE,
    CONSTRAINT FK_ENGENHEIRO_PESSOA FOREIGN KEY (PES_ID) 
    REFERENCES DESAFIO.PESSOA (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DESAFIO.UNIDADE_RESIDENCIAL (
    ID                  INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    METRAGEM_UNIDADE    FLOAT NOT NULL CHECK(METRAGEM_UNIDADE > 0),
    NUM_QUARTOS         INT NOT NULL,
    NUM_BANHEIROS       INT NOT NULL,
    PES_PROPRIETARIA    INT,
    CONSTRAINT FK_UNIDADE_RESIDENCIAL_PESSOA FOREIGN KEY (PES_PROPRIETARIA)
    REFERENCES DESAFIO.PESSOA (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DESAFIO.EDIFICACAO (
    ID                  INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    METRAGEM_TOTAL      FLOAT NOT NULL,
    ENDERECO            TEXT NOT NULL,
    ENG_RESPONSAVEL     INT NOT NULL,
    CONSTRAINT FK_EDIFICACAO_ENGENHEIRO FOREIGN KEY (ENG_RESPONSAVEL)
    REFERENCES DESAFIO.ENGENHEIRO (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DESAFIO.EDIFICACAO_UNIDADE (
    ID              INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    EDI_ID          INT NOT NULL,
    UNI_ID          INT NOT NULL UNIQUE,
    CONSTRAINT FK_EDIFICACAO_UNIDADE_EDIFICACAO FOREIGN KEY (EDI_ID)
    REFERENCES DESAFIO.EDIFICACAO (ID) ON DELETE CASCADE,
    CONSTRAINT FK_EDIFICACAO_UNIDADE_UNIDADE_RESIDENCIAL FOREIGN KEY (UNI_ID)
    REFERENCES DESAFIO.UNIDADE_RESIDENCIAL (ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DESAFIO.PREDIO (
    ID              INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NOME            VARCHAR(45) NOT NULL,
    NUM_ANDARES     INT NOT NULL CHECK(NUM_ANDARES > 3),
    AP_ANDAR        INT NOT NULL CHECK(AP_ANDAR > 0)
);

CREATE TABLE IF NOT EXISTS DESAFIO.CASA (
    ID              INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CONDOMINIO      BOOLEAN NOT NULL,
    SOBRADO         BOOLEAN NOT NULL,
    NUM_ANDARES     INT CHECK(SOBRADO = TRUE AND NUM_ANDARES > 1 OR SOBRADO = FALSE AND NUM_ANDARES = 1)
);

CREATE TABLE IF NOT EXISTS DESAFIO.EDIFICACAO_PREDIO_CASA (
    ID              INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    EDI_ID          INT NOT NULL UNIQUE,
    IS_PREDIO       BOOLEAN NOT NULL,
    PRE_ID          INT,
    CAS_ID          INT,
    CONSTRAINT FK_EDIFICACAO_PREDIO_CASA_EDIFICACAO FOREIGN KEY (EDI_ID)
    REFERENCES DESAFIO.EDIFICACAO (ID) ON DELETE CASCADE,
    CONSTRAINT FK_EDIFICACAO_PREDIO_CASA_PREDIO FOREIGN KEY (PRE_ID)
    REFERENCES DESAFIO.PREDIO (ID) ON DELETE CASCADE,
    CONSTRAINT FK_EDIFICACAO_PREDIO_CASA_CASA FOREIGN KEY (CAS_ID)
    REFERENCES DESAFIO.CASA (ID) ON DELETE CASCADE,
    CHECK (
        (IS_PREDIO = TRUE AND PRE_ID IS NOT NULL AND CAS_ID IS NULL) OR
        (IS_PREDIO = FALSE AND CAS_ID IS NOT NULL AND PRE_ID IS NULL)
    )
);

COPY DESAFIO.PESSOA (CPF, NOME) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\pessoa.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.ENGENHEIRO (CREA, PES_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\engenheiro.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.UNIDADE_RESIDENCIAL (METRAGEM_UNIDADE, NUM_QUARTOS, NUM_BANHEIROS, PES_PROPRIETARIA) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\unidade_residencial.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.EDIFICACAO (METRAGEM_TOTAL, ENDERECO, ENG_RESPONSAVEL) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\edificacao.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.EDIFICACAO_UNIDADE (EDI_ID, UNI_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\edificacao_unidade.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.PREDIO (NOME, NUM_ANDARES, AP_ANDAR) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\predio.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.CASA (CONDOMINIO, SOBRADO, NUM_ANDARES) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\casa.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY DESAFIO.EDIFICACAO_PREDIO_CASA (EDI_ID, IS_PREDIO, PRE_ID, CAS_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex6\edificacao_predio_casa.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);


-- 1. MOSTRAR TODAS AS UNIDADES RESIDENCIAIS, SEUS PROPRIETÁRIOS E ENDEREÇOS
SELECT *
FROM DESAFIO.UNIDADE_RESIDENCIAL AS UNI
LEFT JOIN DESAFIO.PESSOA AS PES ON UNI.PES_PROPRIETARIA = PES.ID
LEFT JOIN DESAFIO.EDIFICACAO AS EDI ON EDI.ID = UNI.ID
GROUP BY UNI.ID, PES.ID, EDI.ID
ORDER BY UNI.METRAGEM_UNIDADE;

-- 2. MOSTRAR TODOS OS ENGENHEIROS QUE TEM PELO DUAS EDIFICAÇÕES
SELECT ENG.CREA, PES.NOME, COUNT(EDI.ENG_RESPONSAVEL) AS QTD_EDIFICACOES
FROM DESAFIO.ENGENHEIRO ENG
JOIN DESAFIO.EDIFICACAO EDI ON EDI.ENG_RESPONSAVEL = ENG.ID
JOIN DESAFIO.PESSOA PES ON PES.ID = ENG.PES_ID
GROUP BY ENG.ID, ENG.CREA, PES.NOME
HAVING COUNT(EDI.ENG_RESPONSAVEL) > 1;

-- 3. MOSTRAR TODAS AS EDIFICAÇÕES QUE SÃO DO TIPO PRÉDIO E ORDENAR PELO NÚMERO DE ANDARES
SELECT PRED.NOME, PRED.NUM_ANDARES, EDI.ENDERECO
FROM DESAFIO.PREDIO PRED
JOIN DESAFIO.EDIFICACAO_PREDIO_CASA EPC ON EPC.PRE_ID = PRED.ID
JOIN DESAFIO.EDIFICACAO EDI ON EDI.ID = EPC.EDI_ID
GROUP BY EDI.ID, PRED.ID
ORDER BY PRED.NUM_ANDARES ASC;