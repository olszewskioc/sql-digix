/*
------------------------------------------------------------------

 						        AULA 7 (12/02/25)
                                TEMA: FUNCTIONS
						       THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

-- FUNCTIONS EXECUTES AN ESPECIFIC ACTION
-- THIS PROVIDES A CENTRALIZATION OF CRUD AND SECURITY

-- THE FUNCTIONS CAN BE DEFINED BY THE USER OR CAN BE EMBED FUNCTIONS
-- WE HAVE THREE TYPE OF FUNCTIONS: MATHEMATIC, DATE AND STRING

-- MATHEMATIC FUNCTIONS
SELECT ABS(-10);    -- RETURN THE ABSOLUTE VALUE OF THE NUMBER
SELECT POWER(2, 3);  -- RETURN THE POWER OF THE NUMBER
SELECT ROUND(3.14159, 2);  -- RETURN THE ROUND OF THE NUMBER WITH N DECIMALS
SELECT CEIL(3.14159);  -- RETURN THE CEIL OF THE NUMBER (ROUND UP)
SELECT FLOOR(3.14159);  -- RETURN THE FLOOR OF THE NUMBER (ROUND DOWN)
SELECT SIGN(-10);  -- RETURN THE SIGN OF THE NUMBER
SELECT PI();  -- RETURN THE PI NUMBER
SELECT SQRT(9);  -- RETURN THE SQRT OF THE NUMBER
SELECT TRUNC(12.99);    -- RETURN THE TRUNC OF THE NUMBER (ONLY THE INTEGER PART)
SELECT MOD(11, 3);  -- RETURN THE MOD OF THE NUMBER (THE REST OF THE DIVISION)
SELECT LN(2.7175);   
SELECT LOG(10, 10);
SELECT COS(30);
SELECT ATAN(0.707);
SELECT ASINH(0.5);

-- STRING FUNCTIONS
SELECT LOWER('THIAGO OLSZEWSKI');  -- RETURN THE LOWER CASE OF THE STRING
SELECT UPPER('thiago olszewski');  -- RETURN THE UPPER CASE OF THE STRING
SELECT INITCAP('thiago olszewski');  -- RETURN THE INITCAP OF THE STRING
SELECT LPAD('THIAGO', 10, '*');  -- RETURN THE LPAD OF THE STRING
SELECT RPAD('THIAGO', 10, '0');  -- RETURN THE RPAD OF THE STRING
SELECT LTRIM('   THIAGO   ');  -- RETURN THE LTRIM OF THE STRING
SELECT RTRIM('   THIAGO   ');  -- RETURN THE RTRIM OF THE STRING
SELECT TRIM('   THIAGO   ');  -- RETURN THE TRIM OF THE STRING
SELECT REPLACE('THIAGO OLSZEWSKI', 'O', '0');  -- RETURN THE REPLACE OF THE STRING
SELECT CONCAT('TESTE', ' ', 'FUNÇÃO');  -- RETURN THE CONCAT OF THE STRING
SELECT SUBSTR('TESTE FUNÇÃO', 1, 5);  -- RETURN THE SUBSTRING

-- DATE FUNCTIONS
SELECT CURRENT_DATE;  -- RETURN THE CURRENT DATE
SELECT CURRENT_TIME;  -- RETURN THE CURRENT TIME
SELECT CURRENT_TIMESTAMP;  -- RETURN THE CURRENT TIMESTAMP
SELECT CURRENT_TIME AT TIME ZONE 'America/Sao_Paulo';  -- RETURN THE CURRENT TIME IN THE SPECIFIED TIME ZONE
SELECT EXTRACT(YEAR FROM CURRENT_DATE);  -- RETURN THE YEAR OF THE CURRENT DATE
SELECT EXTRACT(MONTH FROM CURRENT_DATE);  -- RETURN THE MONTH OF THE CURRENT DATE
SELECT EXTRACT(DAY FROM CURRENT_DATE);  -- RETURN THE DAY OF THE CURRENT DATE
SELECT EXTRACT(HOUR FROM CURRENT_TIME);  -- RETURN THE HOUR OF THE CURRENT TIME
SELECT EXTRACT(MINUTE FROM CURRENT_TIME);  -- RETURN THE MINUTE OF THE CURRENT TIME
SELECT EXTRACT(SECOND FROM CURRENT_TIME);  -- RETURN THE SECOND OF THE CURRENT TIME
SELECT AGE(DATE('2002-10-01'));
SELECT AGE('2002-10-15', '2002-10-01');
SELECT INTERVAL '3 DAY';

-- FIRST EXAMPLE - CREATE A FUNCTION POSTGRESQL
CREATE OR REPLACE FUNCTION SOMA(A INTEGER, B INTEGER) RETURNS INTEGER AS $$
BEGIN
    RETURN A + B;
END
$$ LANGUAGE plpgsql;

-- CALL THE FUNCTION
SELECT SOMA(10, 20);

-- CREATE A FUNCTION MYSQL
-- CREATE FUNCTION SOMA(A INT, B INT) RETURNS INT AS
-- DETERMINISTIC
-- BEGIN
--     RETURN A + B;
-- END

CREATE OR REPLACE FUNCTION INSERE_PARTIDA(ID INTEGER, TIME_1 INTEGER, TIME_2 INTEGER, TIME_1_GOLS INTEGER, TIME_2_GOLS INTEGER)
RETURNS VOID AS $$
BEGIN
INSERT INTO PARTIDA (ID, TIME_1, TIME_2, TIME_1_GOLS, TIME_2_GOLS)
VALUES (ID, TIME_1, TIME_2, TIME_1_GOLS, TIME_2_GOLS);
END
$$ LANGUAGE plpgsql;

-- CALL THE FUNCTION
SELECT INSERE_PARTIDA(9, 1, 2, 4, 2);

CREATE OR REPLACE FUNCTION CONSULTA() RETURNS SETOF EX_VIEWS.TIME AS $$
BEGIN
    RETURN QUERY SELECT * FROM EX_VIEWS.TIME;
END
$$ LANGUAGE plpgsql;

SELECT CONSULTA();

-- FUNCTION WITH INTERNAL VARIABLE
CREATE OR REPLACE FUNCTION CONSULTA_VENCEDOR_POR_TIME(ID_TIME INTEGER)
RETURNS VARCHAR(50) AS $$
DECLARE 
    VENCEDOR VARCHAR(50);
BEGIN
    SELECT CASE
        WHEN TIME_1_GOLS > TIME_2_GOLS THEN (
            SELECT NOME FROM EX_VIEWS.TIME WHERE ID = TIME_1
        )
        WHEN TIME_1_GOLS < TIME_2_GOLS THEN (
            SELECT NOME FROM EX_VIEWS.TIME WHERE ID = TIME_2
        )
        ELSE 'EMPATE'
        END INTO VENCEDOR 
        FROM EX_VIEWS.PARTIDA 
        WHERE TIME_1 = ID_TIME OR TIME_2 = ID_TIME;
        RETURN VENCEDOR;
END
$$ LANGUAGE plpgsql; 

SELECT consulta_vencedor_por_time(1);

