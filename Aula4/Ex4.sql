/*
------------------------------------------------------------------

 						EXERCÍCIO 4 (05/02/25)
						    THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

CREATE TABLE IF NOT EXISTS EX.DIRETOR (
	ID_DIRETOR		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_DIRETOR	VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS EX.GENERO (
	ID_GENERO		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_GENERO		VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS EX.FILME (
	ID_FILME		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_BR			VARCHAR(45) NOT NULL,
	NOME_EN			VARCHAR(45),
	ANO_LANCAMENTO	INT NOT NULL,
	SINOPSE			TEXT,
	DIRETOR_ID		INT NOT NULL,
	GENERO_ID		INT NOT NULL,
	CONSTRAINT FK_FILME_DIRETOR FOREIGN KEY (DIRETOR_ID) REFERENCES EX.DIRETOR(ID_DIRETOR),
	CONSTRAINT FK_FILME_GENERO FOREIGN KEY (GENERO_ID) REFERENCES EX.GENERO(ID_GENERO)
);

CREATE TABLE IF NOT EXISTS EX.PREMIACAO (
	ID_PREMIACAO 	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_PREMIACAO 	VARCHAR(45) NOT NULL,
	ANO				INT NOT NULL
);

CREATE TABLE IF NOT EXISTS EX.FILME_HAS_PREMIACAO (
	ID_FILME_HAS_PREMIACAO 	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FILME_ID 				INT NOT NULL,
	PREMIACAO_ID 			INT NOT NULL,
	GANHOU					BOOLEAN NOT NULL,
	CONSTRAINT FK_FILME_HAS_PREMIACAO_FILME FOREIGN KEY (FILME_ID) REFERENCES EX.FILME(ID_FILME),
	CONSTRAINT FK_FILME_HAS_PREMIACAO_PREMIACAO FOREIGN KEY (PREMIACAO_ID) REFERENCES EX.PREMIACAO(ID_PREMIACAO)
);

CREATE TABLE IF NOT EXISTS EX.SALA (
	ID_SALA			INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_SALA		VARCHAR(45) NOT NULL,
	CAPACIDADE		INT
);

CREATE TABLE IF NOT EXISTS EX.HORARIO (
	ID_HORARIO		INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	HORARIO			TIME NOT NULL
);

CREATE TABLE IF NOT EXISTS EX.FILME_EXIBIDO_SALA (
	ID_FILME_EXIBIDO_SALA	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FILME_ID				INT NOT NULL,
	SALA_ID					INT NOT NULL,
	HORARIO_ID				INT NOT NULL,
	CONSTRAINT FK_FILME_EXIBIDO_SALA_FILME FOREIGN KEY (FILME_ID) REFERENCES EX.FILME(ID_FILME),
	CONSTRAINT FK_FILME_EXIBIDO_SALA_SALA FOREIGN KEY (SALA_ID) REFERENCES EX.SALA(ID_SALA),
	CONSTRAINT FK_FILME_EXIBIDO_SALA_HORARIO FOREIGN KEY (HORARIO_ID) REFERENCES EX.HORARIO(ID_HORARIO)
);

CREATE TABLE IF NOT EXISTS EX.FUNCIONARIO (
	ID_FUNCIONARIO			INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_FUNCIONARIO 		VARCHAR(45) NOT NULL,
	CARTEIRA_TRAB 			INT NOT NULL,
	DATA_CONTRATA			DATE NOT NULL,
	SALARIO_FUNCIONARIO		FLOAT NOT NULL
);

CREATE TABLE IF NOT EXISTS EX.FUNCAO (
	ID_FUNCAO	INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NOME_FUNCAO	VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS EX.HORARIO_TRABALHO_FUNCIONARIO (
	ID_HORARIO_TRABALHO_FUNCIONARIO INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FUNCIONARIO_ID 					INT NOT NULL,
	HORARIO_ID 						INT NOT NULL,
	FUNCAO_ID						INT NOT NULL,
	CONSTRAINT FK_HORARIO_TRABALHO_FUNCIONARIO_FUNCIONARIO 
	FOREIGN KEY (FUNCIONARIO_ID) REFERENCES EX.FUNCIONARIO(ID_FUNCIONARIO),
	CONSTRAINT FK_HORARIO_TRABALHO_FUNCIONARIO_HORARIO 
	FOREIGN KEY (HORARIO_ID) REFERENCES EX.HORARIO(ID_HORARIO),
	CONSTRAINT FK_HORARIO_TRABALHO_FUNCIONARIO_FUNCAO 
	FOREIGN KEY (FUNCAO_ID) REFERENCES EX.FUNCAO(ID_FUNCAO)
);

-- POPULATING THE TABLES WITH SOME DATA
SELECT * FROM EX.DIRETOR;
SELECT * FROM EX.GENERO;
SELECT * FROM EX.FILME;
SELECT * FROM EX.PREMIACAO;
SELECT * FROM EX.SALA;
SELECT * FROM EX.FUNCIONARIO;
SELECT * FROM EX.FUNCAO;
SELECT * FROM EX.FILME_HAS_PREMIACAO;
SELECT * FROM EX.HORARIO;
SELECT * FROM EX.HORARIO_TRABALHO_FUNCIONARIO;
SELECT * FROM EX.FILME_EXIBIDO_SALA;

COPY EX.DIRETOR (NOME_DIRETOR) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Diretor.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.GENERO (NOME_GENERO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Genero.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.FILME (NOME_BR, NOME_EN, ANO_LANCAMENTO, SINOPSE, DIRETOR_ID, GENERO_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Filme.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.PREMIACAO (NOME_PREMIACAO, ANO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Premiacao.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.FILME_HAS_PREMIACAO (FILME_ID, PREMIACAO_ID, GANHOU) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Filme_has_premiacao.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.SALA (NOME_SALA, CAPACIDADE) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Sala.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.HORARIO (HORARIO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Horario.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.FUNCAO (NOME_FUNCAO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Funcao.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.HORARIO_TRABALHO_FUNCIONARIO (FUNCIONARIO_ID, HORARIO_ID, FUNCAO_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Horario_trabalho_funcionario.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.FILME_EXIBIDO_SALA (FILME_ID, SALA_ID, HORARIO_ID) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Filme_exibido_sala.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);
COPY EX.FUNCIONARIO (NOME_FUNCIONARIO, CARTEIRA_TRAB, DATA_CONTRATA, SALARIO_FUNCIONARIO) FROM 'C:\Program Files\PostgreSQL\17\data\povoating\ex4\Funcionario.txt' WITH (FORMAT csv, DELIMITER E'\t', HEADER false);

INSERT INTO EX.FILME_EXIBIDO_SALA (FILME_ID, SALA_ID, HORARIO_ID) VALUES (2, 5, 3);
INSERT INTO EX.FILME_EXIBIDO_SALA (FILME_ID, SALA_ID, HORARIO_ID) VALUES (2, 5, 6);

INSERT INTO EX.FILME (NOME_BR, NOME_EN, ANO_LANCAMENTO, SINOPSE, DIRETOR_ID, GENERO_ID)
VALUES ('Pulp Fiction', 'Pulp Fiction', 2002, 'VIOLEÊNCIA', 1, 1);

-- EXERCÍCIOS

-- 1. RETORNAR A MÉDIA DOS SALÁRIOS DOS FUNCIONÁRIOS
SELECT AVG(SALARIO_FUNCIONARIO) AS MEDIA_SALARIO FROM EX.FUNCIONARIO;

-- 2. LISTAR OS FUNCIONÁRIOS E SUAS FUNÇÕES, INCLUINDO AQUELES SEM FUNÇÃO DEFINIDA
SELECT 
    F.ID_FUNCIONARIO,
    F.NOME_FUNCIONARIO,
    COALESCE(FUN.NOME_FUNCAO, 'Sem função definida') AS NOME_FUNCAO
FROM EX.FUNCIONARIO F
LEFT JOIN EX.HORARIO_TRABALHO_FUNCIONARIO HTF ON F.ID_FUNCIONARIO = HTF.FUNCIONARIO_ID
LEFT JOIN EX.FUNCAO FUN ON HTF.FUNCAO_ID = FUN.ID_FUNCAO
ORDER BY F.ID_FUNCIONARIO ASC;

-- 3. RETORNAR O NOME DE TODOS OS FUNCIONÁRIOS QUE POSSUEM O 
-- MESMO HORÁRIO DE TRABALHO QUE ALGUM OUTRO FUNCIONÁRIO
SELECT DISTINCT F.NOME_FUNCIONARIO
FROM EX.FUNCIONARIO F
JOIN EX.HORARIO_TRABALHO_FUNCIONARIO HTF ON F.ID_FUNCIONARIO = HTF.FUNCIONARIO_ID
WHERE HTF.HORARIO_ID IN (
    SELECT HORARIO_ID
    FROM EX.HORARIO_TRABALHO_FUNCIONARIO
    GROUP BY HORARIO_ID
    HAVING COUNT(DISTINCT FUNCIONARIO_ID) > 1
)
ORDER BY F.NOME_FUNCIONARIO;

-- 4. ENCONTRAR OS FILMES QUE FORAM EXIBIDOS EM PELO MENOS DUAS SALAS DIFERENTES
SELECT DISTINCT EX.FILME.NOME_BR 
FROM EX.FILME 
JOIN EX.FILME_EXIBIDO_SALA FES ON EX.FILME.ID_FILME = FES.FILME_ID
WHERE ID_FILME IN (
	SELECT FILME_ID
	FROM EX.FILME_EXIBIDO_SALA
	GROUP BY FILME_ID
	HAVING COUNT(DISTINCT SALA_ID) > 1
);

-- 5. LISTAR OS FILMES E SEUS RESPECTIVOS GÊNEROS, GARANTINDO QUE NÃO HAJA DUPLICATAS
SELECT DISTINCT *
FROM EX.FILME F 
JOIN EX.GENERO G ON F.GENERO_ID = G.ID_GENERO
ORDER BY F.ID_FILME ASC;

-- 6. ENCONTRAR OS FILMES QUE RECEBERAM PRÊMIOS E QUE TIVERAM EXIBIÇÃO EM AO MENOS UMA SALA
SELECT DISTINCT F.*
FROM EX.FILME F
JOIN EX.FILME_HAS_PREMIACAO P ON F.ID_FILME = P.FILME_ID AND P.GANHOU = TRUE
JOIN EX.FILME_EXIBIDO_SALA FES ON F.ID_FILME = FES.FILME_ID;

-- 7. LISTAR OS FILMES QUE NÃO RECEBERAM NENHUM PRÊMIO
SELECT DISTINCT F.*
FROM EX.FILME F
JOIN EX.FILME_HAS_PREMIACAO P ON F.ID_FILME = P.FILME_ID AND P.GANHOU = FALSE
JOIN EX.FILME_EXIBIDO_SALA FES ON F.ID_FILME = FES.FILME_ID;

-- 8. EXIBIR OS DIRETORES QUE DIRIGIRAM PELO MENOS DOIS FILMES
SELECT D.NOME_DIRETOR, COUNT(F.ID_FILME) AS FILMES_DIRIGIDOS
FROM EX.DIRETOR D
JOIN EX.FILME F ON D.ID_DIRETOR = F.DIRETOR_ID
GROUP BY D.NOME_DIRETOR
HAVING COUNT(F.ID_FILME) > 1;

-- 9. LISTAR OS FUNCIONÁRIOS E OS HORÁRIOS QUE TRABALHAM, ORDENADOS PELOHORÁRIO MAIS CEDO
SELECT F.NOME_FUNCIONARIO AS FUNCIONARIO, H.HORARIO
FROM EX.FUNCIONARIO F
JOIN EX.HORARIO_TRABALHO_FUNCIONARIO HTF ON F.ID_FUNCIONARIO = HTF.FUNCIONARIO_ID
JOIN EX.HORARIO H ON HTF.HORARIO_ID = H.ID_HORARIO
ORDER BY H.HORARIO;

-- 10. LISTAR OS FILMES QUE FORAM EXIBIDOS NA MESMA SALA EM HORÁRIOS DIFERENTES
SELECT DISTINCT F.NOME_BR, S.NOME_SALA
FROM EX.FILME_EXIBIDO_SALA FES
JOIN EX.FILME_EXIBIDO_SALA FES2 ON FES.SALA_ID = FES2.SALA_ID
AND FES.HORARIO_ID <> FES2.HORARIO_ID
AND FES.FILME_ID = FES2.FILME_ID
JOIN EX.FILME F ON FES.FILME_ID = F.ID_FILME
JOIN EX.SALA S ON FES.SALA_ID = S.ID_SALA
ORDER BY F.NOME_BR ASC;

-- 11. UNIR DIRETORES E FUNCIONÁRIOS EM UMA LINHA
SELECT ID_DIRETOR AS ID, NOME_DIRETOR AS NOME, 'Diretor' AS TIPO
FROM EX.DIRETOR
UNION
SELECT ID_FUNCIONARIO AS ID, NOME_FUNCIONARIO AS NOME, 'Funcionario' AS TIPO
FROM EX.FUNCIONARIO;


-- 12. EXIBIR TODAS AS FUNÇÕES DIFERENTES QUE OS FUNCIONÁRIOS EXERCEM E A
-- QUANTIDADE DE FUNCIONÁRIOS EM CADA UMA
-- SELECT F.NOME_FUNCAO, COUNT(FUNC.ID_FUNCIONARIO) AS QTD_FUNCIONARIOS
-- FROM EX.FUNCIONARIO FUNC
-- JOIN EX.FUNCAO F ON FUNC.ID_FUNCIONARIO = F.ID_FUNCAO
-- GROUP BY F.NOME_FUNCAO;	-- AGRUPAR AS LINHAS POR NOME_FUNCAO

SELECT F.NOME_FUNCAO, COUNT(FUNC.ID_FUNCIONARIO) AS QTD_FUNC
FROM EX.FUNCAO F
LEFT JOIN EX.HORARIO_TRABALHO_FUNCIONARIO FES ON F.ID_FUNCAO = FES.FUNCAO_ID
LEFT JOIN EX.FUNCIONARIO FUNC ON FES.FUNCIONARIO_ID = FUNC.ID_FUNCIONARIO
GROUP BY F.NOME_FUNCAO;

-- 13. ENCONTRAR OS FILMES QUE FORAM EXIBIDOS EM SALAS COM CAPACIDADE SUPERIOR
-- À MÉDIA DE TODAS AS SALAS
SELECT F.NOME_BR, S.NOME_SALA, S.CAPACIDADE
FROM EX.FILME_EXIBIDO_SALA FES
JOIN EX.SALA S ON FES.SALA_ID = S.ID_SALA
JOIN EX.FILME F ON FES.FILME_ID = F.ID_FILME
-- JOIN (SELECT AVG(CAPACIDADE) AS MEDIA FROM EX.SALA) AS M ON S.CAPACIDADE > M.MEDIA; -- SUGESTÃO COM JOIN
WHERE S.CAPACIDADE > (SELECT AVG(CAPACIDADE) FROM EX.SALA);

SELECT AVG(CAPACIDADE) FROM EX.SALA;

-- 14. CALCULAR O SALÁRIO ANUAL DOS FUNCIONÁRIOS


-- 15. EXIBIR A RELAÇÃO ENTRE A CAPACIDADE DA SALA E O NÚMERO TOTAL DE FILMES
-- EXIBIDOS NELA
-- SELECT S.NOME_SALA, S.CAPACIDADE, COUNT(FES.FILME_ID) AS QTD_FILMES, 
-- (S.CAPACIDADE / NULLIF(COUNT(FES.FILME_ID), 0)) AS RATIO
-- FROM EX.FILME_EXIBIDO_SALA FES
-- RIGHT JOIN EX.SALA S ON FES.SALA_ID = S.ID_SALA
-- GROUP BY S.NOME_SALA, S.CAPACIDADE, S.ID_SALA
-- ORDER BY (S.CAPACIDADE / NULLIF(COUNT(FES.FILME_ID), 0)) ASC;
SELECT S.NOME_SALA, S.CAPACIDADE, COUNT(FES.FILME_ID) AS QTD_FILMES, 
ROUND((1.0 * COUNT(FES.FILME_ID) / NULLIF((1.0 * S.CAPACIDADE), 0)), 4) AS RATIO
FROM EX.SALA S
LEFT JOIN EX.FILME_EXIBIDO_SALA FES ON FES.SALA_ID = S.ID_SALA
GROUP BY S.NOME_SALA, S.CAPACIDADE, S.ID_SALA
ORDER BY (1.0 * COUNT(FES.FILME_ID) / NULLIF((1.0 * S.CAPACIDADE), 0)) ASC;

 