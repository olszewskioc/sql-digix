/*
------------------------------------------------------------------

 						        EX11 (19/02/25)
                                TEMA: EXERCICIO
						       THIAGO OLSZEWSKI

------------------------------------------------------------------
*/

/*
    1 - CRIAR UM TRIGGER PARA AUDITORIA DE EXCLUSÃO DE MÁQUINAS
*/

CREATE TABLE IF NOT EXISTS MAQUINA_AUDITORIA(
    ID  INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ID_MAQUINA  INT NOT NULL,
    DATA_EXCLUSAO  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION MAQUINA_DELETE_AUDIT()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM SOFTWARE WHERE FK_MAQUINA = OLD.ID_MAQUINA;
    INSERT INTO MAQUINA_AUDITORIA(ID_MAQUINA) VALUES (OLD.ID_MAQUINA);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGG_MAQUINA_AUDIT
BEFORE DELETE ON MAQUINA
FOR EACH ROW
EXECUTE PROCEDURE MAQUINA_DELETE_AUDIT();

DELETE FROM MAQUINA WHERE ID_MAQUINA = 4;

/*
    2 - CRIAR UM TRIGGER PARA EVITAR SENHAS FRACAS
*/
CREATE OR REPLACE FUNCTION USER_CHECK_PASSWORD()
RETURNS TRIGGER AS $$
BEGIN
    IF LENGTH(NEW.PASSWORD) < 6 THEN
        RAISE EXCEPTION 'A SENHA NÃO PODE TER MENOS QUE 6 CARACTERES';
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGG_USER_CHECK_PASSWORD
BEFORE INSERT OR UPDATE ON USUARIOS
FOR EACH ROW
EXECUTE PROCEDURE USER_CHECK_PASSWORD();

INSERT INTO USUARIOS(ID_USUARIO, PASSWORD, NOME_USUARIO, RAMAL, ESPECIALIDADE) 
VALUES(5, 'TESTES', 'THIAGO', 1234, 'BACKEND');

/*
    3 - CRIAR UM TRIGGER PARA ATUALIZAR CONTAGEM DE SOFTWARES EM CADA MÁQUINA
*/
CREATE OR REPLACE FUNCTION MAQUINA_SOFTWARE_COUNT()
RETURNS TRIGGER AS $$
BEGIN
    IF LENGTH(NEW.PASSWORD) < 6 THEN
        RAISE EXCEPTION 'A SENHA NÃO PODE TER MENOS QUE 6 CARACTERES';
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER TRIGG_MAQUINA_SOFTWARE_COUNT
BEFORE INSERT OR UPDATE ON USUARIOS
FOR EACH ROW
EXECUTE PROCEDURE USER_CHECK_PASSWORD();